# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type OptionMetrics {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  selectedCount: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type QuestionSingleChoiceMetrics implements QuestionMetrics {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  answerCount: Int!
  unansweredCount: Int!
  options: [OptionMetrics!]!
  rightAnswerCount: Int!
  wrongAnswerCount: Int!
}

interface QuestionMetrics {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  answerCount: Int!
  unansweredCount: Int!
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_OR_FALSE
  TEXT
}

type QuestionMultipleChoiceMetrics implements QuestionMetrics {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  answerCount: Int!
  unansweredCount: Int!
  options: [OptionMetrics!]!
  rightAnswerCount: Int!
  wrongAnswerCount: Int!
}

type QuestionTrueOrFalseMetrics implements QuestionMetrics {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  answerCount: Int!
  unansweredCount: Int!
  options: [OptionMetrics!]!
  rightAnswerCount: Int!
  wrongAnswerCount: Int!
}

type QuestionTextMetrics implements QuestionMetrics {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  answerCount: Int!
  unansweredCount: Int!
}

type QuestionnaireMetrics {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  totalResponseCount: Int!
  totalAttemptCount: Int!
  totalAnswerTime: Int!
  avgAnswerTime: Float!
  avgAttemptCount: Float!
  questionMetrics: [QuestionMetrics!]!

  """A JSON string of the questionnaire metrics map (by location)"""
  byLocationMap: String
}

type Admin implements User & SchemaBaseInterface {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: UserType!
  self: User!
  name: String!
  email: String!
}

interface User {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: UserType!
  self: User!
}

enum UserType {
  Respondent
  Admin
  User
}

interface SchemaBaseInterface {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Option {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!

  """For true or false questions."""
  true: Boolean
  feedbackAfterSubmit: String
  correct: Boolean
}

type QuestionSingleChoice implements Question {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  title: String
  weight: Int
  required: Boolean!
  description: String
  showCorrectAnswer: Boolean!
  options: [Option!]!
  randomizeOptions: Boolean!
  wrongAnswerFeedback: String
  rightAnswerFeedback: String
}

interface Question {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  title: String
  weight: Int
  required: Boolean!
  description: String
  showCorrectAnswer: Boolean!
}

type QuestionMultipleChoice implements Question {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  title: String
  weight: Int
  required: Boolean!
  description: String
  showCorrectAnswer: Boolean!
  options: [Option!]!
  randomizeOptions: Boolean!
  wrongAnswerFeedback: String
  rightAnswerFeedback: String
}

type QuestionTrueOrFalse implements Question {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  title: String
  weight: Int
  required: Boolean!
  description: String
  showCorrectAnswer: Boolean!
  options: [Option!]!
  wrongAnswerFeedback: String
  rightAnswerFeedback: String
}

type QuestionText implements Question {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  title: String
  weight: Int
  required: Boolean!
  description: String
  showCorrectAnswer: Boolean!
  feedbackAfterSubmit: String
}

type QuestionnaireExam implements Questionnaire & SchemaBaseInterface {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionnaireType!
  metrics: QuestionnaireMetrics!
  active: Boolean!
  requireEmail: Boolean!
  requireName: Boolean!
  user: Admin!
  title: String!
  description: String!
  latest: Boolean!
  sharedId: String!
  questions: [Question!]!
  sharedCreatedAt: DateTime!
  color: String
  bgColor: String
  timeLimit: Float
  passingGradePercent: Float
  maxRetryAmount: Float
  randomizeQuestions: Boolean!
}

interface Questionnaire {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionnaireType!
  metrics: QuestionnaireMetrics!
  active: Boolean!
  requireEmail: Boolean!
  requireName: Boolean!
  user: Admin!
  title: String!
  description: String!
  latest: Boolean!
  sharedId: String!
  questions: [Question!]!
  sharedCreatedAt: DateTime!
  color: String
  bgColor: String
}

enum QuestionnaireType {
  QuestionnaireSurvey
  QuestionnaireExam
  QuestionnaireQuiz
}

type QuestionnaireSurvey implements Questionnaire & SchemaBaseInterface {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionnaireType!
  metrics: QuestionnaireMetrics!
  active: Boolean!
  requireEmail: Boolean!
  requireName: Boolean!
  user: Admin!
  title: String!
  description: String!
  latest: Boolean!
  sharedId: String!
  questions: [Question!]!
  sharedCreatedAt: DateTime!
  color: String
  bgColor: String
}

type QuestionnaireQuiz implements Questionnaire & SchemaBaseInterface {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionnaireType!
  metrics: QuestionnaireMetrics!
  active: Boolean!
  requireEmail: Boolean!
  requireName: Boolean!
  user: Admin!
  title: String!
  description: String!
  latest: Boolean!
  sharedId: String!
  questions: [Question!]!
  sharedCreatedAt: DateTime!
  color: String
  bgColor: String
}

type Session {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  ip: String!
  userAgent: String!
  active: Boolean!
  expiresAt: DateTime!
}

type DeleteQuestionnaireResponse {
  status: String!
}

type PaginatedQuestionnaireResponse {
  results: [Questionnaire!]!
  currentPage: Int!
  totalPageCount: Int!
  totalResultCount: Int!
  hasNextPage: Boolean!
}

type RespondentLocation {
  country: String!
  region: String!
  city: String!
  timezone: String!
}

type Respondent implements User & SchemaBaseInterface {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: UserType!
  self: Respondent!
  name: String
  email: String
  location: RespondentLocation
  questionnaire: Questionnaire!
}

type AnswerSingleChoice implements Answer {
  type: AnswerType!
  question: String!
  answeredAt: DateTime
  correct: Boolean
  option: String
}

interface Answer {
  type: AnswerType!
  question: String!
  answeredAt: DateTime
  correct: Boolean
}

enum AnswerType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_OR_FALSE
  TEXT
}

type AnswerMultipleChoice implements Answer {
  type: AnswerType!
  question: String!
  answeredAt: DateTime
  correct: Boolean
  options: [String!]
}

type AnswerTrueOrFalse implements Answer {
  type: AnswerType!
  question: String!
  answeredAt: DateTime
  correct: Boolean
  option: String
}

type AnswerText implements Answer {
  type: AnswerType!
  question: String!
  answeredAt: DateTime
  correct: Boolean
  text: String
}

type Response {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  questionnaireSharedId: String!
  answers: [Answer!]!
  startedAt: DateTime!
  user: String!
  completedAt: DateTime
  respondent: Respondent!
  respondentName: String
  respondentEmail: String
  self: Response!
  questionnaire: Questionnaire!
}

type CorrectQuestionOption {
  questionId: String!
  optionIds: [String!]!
}

type ResponseCorrection {
  correctedAnswers: [Answer!]!
  correctQuestionOptions: [CorrectQuestionOption!]!
}

type PublicUpsertResponse {
  respondentToken: String!
  correction: ResponseCorrection!
}

type PaginatedResponseResponse {
  results: [Response!]!
  currentPage: Int!
  totalPageCount: Int!
  totalResultCount: Int!
  hasNextPage: Boolean!
}

type LogOutResponse {
  session: Session!
  user: User!
}

type AuthResponse {
  session: Session!
  user: Admin!
  authToken: String!
}

type SignOutResponse {
  status: String!
}

type Query {
  adminFetchQuestionnaire(questionnaireSharedId: String, questionnaireId: String, latest: Boolean = true): Questionnaire
  publicFetchQuestionnaire(questionnaireSharedId: String, questionnaireId: String): Questionnaire
  adminFetchQuestionnaires(pagination: PaginationInput = {page: 1, limit: 20}, questionnaireSharedIds: [String!], questionnaireIds: [String!], latest: Boolean = true, textFilter: String): PaginatedQuestionnaireResponse!
  adminFetchResponses(pagination: PaginationInput = {page: 1, limit: 20}, questionnaireSharedIds: [String!], questionnaireIds: [String!], textFilter: String): PaginatedResponseResponse!
  adminFetchResponse(responseId: String!): Response
  fetchAdmin(userId: String, email: String): Admin
}

input PaginationInput {
  page: Int = 1
  limit: Int = 20
}

type Mutation {
  adminDeleteQuestionnaire(questionnaireSharedId: String!): DeleteQuestionnaireResponse
  adminToggleQuestionnaireActive(questionnaireSharedId: String!, active: Boolean): Questionnaire
  adminCreateQuestionnaireQuiz(questions: [QuestionDiscriminatorInput!]!, requireEmail: Boolean = true, requireName: Boolean = false, title: String!, description: String, bgColor: String, color: String): QuestionnaireQuiz!
  adminCreateQuestionnaireSurvey(questions: [QuestionDiscriminatorInput!]!, requireEmail: Boolean = true, requireName: Boolean = false, title: String!, description: String, bgColor: String, color: String): QuestionnaireSurvey!
  adminCreateQuestionnaireExam(questions: [QuestionDiscriminatorInput!]!, requireEmail: Boolean = true, requireName: Boolean = false, title: String!, randomizeQuestions: Boolean = false, passingGradePercent: Float, maxRetryAmount: Int, description: String, timeLimit: Int, bgColor: String, color: String): QuestionnaireExam!
  adminUpdateQuestionnaireQuiz(questionnaireId: String!, questionMethods: [QuestionMethodInput!], questionOrder: [QuestionOrderInput!], active: Boolean, title: String, requireEmail: Boolean, requireName: Boolean, description: String, bgColor: String, color: String): QuestionnaireQuiz!
  adminUpdateQuestionnaireSurvey(questionnaireId: String!, questionMethods: [QuestionMethodInput!], questionOrder: [QuestionOrderInput!], active: Boolean, title: String, requireEmail: Boolean, requireName: Boolean, description: String, bgColor: String, color: String): QuestionnaireSurvey!
  adminUpdateQuestionnaireExam(questionnaireId: String!, questionMethods: [QuestionMethodInput!], questionOrder: [QuestionOrderInput!], randomizeQuestions: Boolean = false, passingGradePercent: Float, active: Boolean, title: String, requireEmail: Boolean, requireName: Boolean, maxRetryAmount: Int, timeLimit: Int, description: String, bgColor: String, color: String): QuestionnaireExam!
  publicUpsertQuestionnaireResponse(answers: [AnswerDiscriminatorInput!]!, questionnaireId: String!, completedAt: DateTime!, startedAt: DateTime!, email: String, name: String): PublicUpsertResponse!
  userlogOut: LogOutResponse!
  publicSignUp(password: String!, email: String!, name: String!): AuthResponse!
  publicSignIn(password: String!, email: String!): AuthResponse!
  publicSignOut: SignOutResponse!
}

input QuestionDiscriminatorInput {
  type: QuestionType!
  questionMultipleChoice: QuestionMultipleChoiceInput
  questionSingleChoice: QuestionSingleChoiceInput
  questionTrueOrFalse: QuestionTrueOrFalseInput
  questionText: QuestionTextInput
}

input QuestionMultipleChoiceInput {
  type: QuestionType!
  title: String
  weight: Int
  required: Boolean = false
  description: String
  showCorrectAnswer: Boolean = false
  options: [OptionInput!]!
  randomizeOptions: Boolean = false
  wrongAnswerFeedback: String
  rightAnswerFeedback: String
}

input OptionInput {
  id: String
  title: String!
  correct: Boolean

  """For true or false questions."""
  true: Boolean
  feedbackAfterSubmit: String
}

input QuestionSingleChoiceInput {
  type: QuestionType!
  title: String
  weight: Int
  required: Boolean = false
  description: String
  showCorrectAnswer: Boolean = false
  options: [OptionInput!]!
  randomizeOptions: Boolean = false
  wrongAnswerFeedback: String
  rightAnswerFeedback: String
}

input QuestionTrueOrFalseInput {
  type: QuestionType!
  title: String
  weight: Int
  required: Boolean = false
  description: String
  showCorrectAnswer: Boolean = false
  options: [OptionInput!]!
  wrongAnswerFeedback: String
  rightAnswerFeedback: String
}

input QuestionTextInput {
  type: QuestionType!
  title: String
  weight: Int
  required: Boolean = false
  description: String
  showCorrectAnswer: Boolean = false
  feedbackAfterSubmit: String
}

input QuestionMethodInput {
  type: QuestionMethodType!
  questionId: String
  index: Int
  questionDiscriminator: QuestionDiscriminatorInput
}

enum QuestionMethodType {
  CREATE
  DELETE
  UPDATE
}

input QuestionOrderInput {
  questionId: String
  index: Int
}

input AnswerDiscriminatorInput {
  type: AnswerType!
  answerMultipleChoice: AnswerMultipleChoiceInput
  answerSingleChoice: AnswerSingleChoiceInput
  answerTrueOrFalse: AnswerTrueOrFalseInput
  answerText: AnswerTextInput
}

input AnswerMultipleChoiceInput {
  type: AnswerType!
  questionId: String!
  answeredAt: DateTime
  optionIds: [String!]
}

input AnswerSingleChoiceInput {
  type: AnswerType!
  questionId: String!
  answeredAt: DateTime
  optionId: String
}

input AnswerTrueOrFalseInput {
  type: AnswerType!
  questionId: String!
  answeredAt: DateTime
  optionId: String
}

input AnswerTextInput {
  type: AnswerType!
  questionId: String!
  answeredAt: DateTime
  text: String
}