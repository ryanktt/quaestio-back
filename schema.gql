# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Admin implements User & SchemaBaseInterface {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: UserType!
  self: User!
  name: String!
  email: String!
}

interface User {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: UserType!
  self: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum UserType {
  Respondent
  Admin
  User
}

interface SchemaBaseInterface {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Option {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  correct: Boolean
  feedbackAfterSubmit: String
  selectedCount: Int!
}

type QuestionSingleChoice implements Question {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  title: String!
  weight: Int
  required: Boolean!
  description: String
  showCorrectAnswer: Boolean!
  answerCount: Int!
  unansweredCount: Int!
  rightAnswerCount: Int!
  wrongAnswerCount: Int!
  options: [Option!]!
  randomizeOptions: Boolean!
  wrongAnswerFeedback: String
  rightAnswerFeedback: String
}

interface Question {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  title: String!
  weight: Int
  required: Boolean!
  description: String
  showCorrectAnswer: Boolean!
  answerCount: Int!
  unansweredCount: Int!
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_OR_FALSE
  TEXT
}

type QuestionMultipleChoice implements Question {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  title: String!
  weight: Int
  required: Boolean!
  description: String
  showCorrectAnswer: Boolean!
  answerCount: Int!
  unansweredCount: Int!
  rightAnswerCount: Int!
  wrongAnswerCount: Int!
  options: [Option!]!
  randomizeOptions: Boolean!
  wrongAnswerFeedback: String
  rightAnswerFeedback: String
}

type QuestionTrueOrFalse implements Question {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  title: String!
  weight: Int
  required: Boolean!
  description: String
  showCorrectAnswer: Boolean!
  answerCount: Int!
  unansweredCount: Int!
  rightAnswerCount: Int!
  wrongAnswerCount: Int!
  options: [Option!]!
  wrongAnswerFeedback: String
  rightAnswerFeedback: String
}

type QuestionText implements Question {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionType!
  title: String!
  weight: Int
  required: Boolean!
  description: String
  showCorrectAnswer: Boolean!
  answerCount: Int!
  unansweredCount: Int!
  feedbackAfterSubmit: String
}

type QuestionnaireExam implements Questionnaire & SchemaBaseInterface {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionnaireType!
  requireEmail: Boolean!
  requireName: Boolean!
  user: Admin!
  title: String!
  latest: Boolean!
  sharedId: String!
  questions: [Question!]!
  responseCount: Int!
  timeLimit: Float
  passingGradePercent: Float
  maxRetryAmount: Float
  randomizeQuestions: Boolean!
}

interface Questionnaire {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionnaireType!
  requireEmail: Boolean!
  requireName: Boolean!
  user: Admin!
  title: String!
  latest: Boolean!
  sharedId: String!
  questions: [Question!]!
  responseCount: Int!
}

enum QuestionnaireType {
  QuestionnaireSurvey
  QuestionnaireExam
  QuestionnaireQuiz
}

type QuestionnaireSurvey implements Questionnaire & SchemaBaseInterface {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionnaireType!
  requireEmail: Boolean!
  requireName: Boolean!
  user: Admin!
  title: String!
  latest: Boolean!
  sharedId: String!
  questions: [Question!]!
  responseCount: Int!
}

type QuestionnaireQuiz implements Questionnaire & SchemaBaseInterface {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: QuestionnaireType!
  requireEmail: Boolean!
  requireName: Boolean!
  user: Admin!
  title: String!
  latest: Boolean!
  sharedId: String!
  questions: [Question!]!
  responseCount: Int!
}

type Session {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  ip: String!
  userAgent: String!
  active: Boolean!
  expiresAt: DateTime!
}

type AnswerSingleChoice implements Answer {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: AnswerType!
  question: String!
  answeredAt: DateTime
  correct: Boolean
  option: String
}

interface Answer {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: AnswerType!
  question: String!
  answeredAt: DateTime
  correct: Boolean
}

enum AnswerType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_OR_FALSE
  TEXT
}

type AnswerMultipleChoice implements Answer {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: AnswerType!
  question: String!
  answeredAt: DateTime
  correct: Boolean
  options: [String!]
}

type AnswerTrueOrFalse implements Answer {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: AnswerType!
  question: String!
  answeredAt: DateTime
  correct: Boolean
  option: String
}

type AnswerText implements Answer {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: AnswerType!
  question: String!
  answeredAt: DateTime
  correct: Boolean
  text: String
}

type Response {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  answers: [Answer!]!
  startedAt: DateTime!
  completedAt: DateTime
  self: Response!
  questionnaire: Questionnaire!
}

type PublicUpsertResponse {
  authToken: String!
}

type LogOutResponse {
  session: Session!
  user: User!
}

type RespondentLocation {
  country: String!
  state: String!
  city: String!
  timezone: String!
}

type Respondent implements User & SchemaBaseInterface {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: UserType!
  self: User!
  name: String
  email: String
  location: RespondentLocation
}

type SignInResponse {
  session: Session!
  user: Admin!
  authToken: String!
}

type Query {
  adminFetchQuestionnaire(questionnaireSharedId: String, questionnaireId: String, latest: Boolean): Questionnaire
  adminFetchQuestionnaires(questionnaireSharedIds: [String!], questionnaireIds: [String!], latest: Boolean): [Questionnaire!]!
  fetchAdmin(userId: String, email: String): Admin
}

type Mutation {
  adminCreateQuestionnaireQuiz(questions: [QuestionDiscriminatorInput!]!, requireEmail: Boolean = true, requireName: Boolean = false, title: String!): QuestionnaireQuiz!
  adminCreateQuestionnaireSurvey(questions: [QuestionDiscriminatorInput!]!, requireEmail: Boolean = true, requireName: Boolean = false, title: String!): QuestionnaireSurvey!
  adminCreateQuestionnaireExam(questions: [QuestionDiscriminatorInput!]!, requireEmail: Boolean = true, requireName: Boolean = false, title: String!, randomizeQuestions: Boolean = false, passingGradePercent: Float, maxRetryAmount: Float, timeLimit: Float): QuestionnaireExam!
  adminUpdateQuestionnaireQuiz(questionnaireId: String!, questions: [QuestionDiscriminatorInput!], requireEmail: Boolean, requireName: Boolean, title: String): QuestionnaireQuiz!
  adminUpdateQuestionnaireSurvey(questionnaireId: String!, questions: [QuestionDiscriminatorInput!], requireEmail: Boolean, requireName: Boolean, title: String): QuestionnaireSurvey!
  adminUpdateQuestionnaireExam(questionnaireId: String!, questions: [QuestionDiscriminatorInput!], randomizeQuestions: Boolean = false, passingGradePercent: Float, maxRetryAmount: Float, timeLimit: Float, title: Float, requireEmail: Boolean, requireName: Boolean): QuestionnaireExam!
  publicUpsertSurveyResponse(answers: [AnswerDiscriminatorInput!]!, questionnaireId: String!): PublicUpsertResponse!
  userlogOut: LogOutResponse!
  publicSignUp(password: String!, email: String!, name: String!): Admin!
  publicSignIn(password: String!, email: String!): SignInResponse!
}

input QuestionDiscriminatorInput {
  type: QuestionType!
  questionMultipleChoice: QuestionMultipleChoiceInput
  questionSingleChoice: QuestionSingleChoiceInput
  questionTrueOrFalse: QuestionTrueOrFalseInput
  questionText: QuestionTextInput
}

input QuestionMultipleChoiceInput {
  type: QuestionType!
  title: String!
  weight: Int
  required: Boolean = false
  description: String
  showCorrectAnswer: Boolean = false
  options: [OptionInput!]!
  randomizeOptions: Boolean = false
  wrongAnswerFeedback: String
  rightAnswerFeedback: String
}

input OptionInput {
  title: String!
  correct: Boolean!
  feedbackAfterSubmit: String
}

input QuestionSingleChoiceInput {
  type: QuestionType!
  title: String!
  weight: Int
  required: Boolean = false
  description: String
  showCorrectAnswer: Boolean = false
  options: [OptionInput!]!
  randomizeOptions: Boolean = false
  wrongAnswerFeedback: String
  rightAnswerFeedback: String
}

input QuestionTrueOrFalseInput {
  type: QuestionType!
  title: String!
  weight: Int
  required: Boolean = false
  description: String
  showCorrectAnswer: Boolean = false
  options: [OptionInput!]!
  wrongAnswerFeedback: String
  rightAnswerFeedback: String
}

input QuestionTextInput {
  type: QuestionType!
  title: String!
  weight: Int
  required: Boolean = false
  description: String
  showCorrectAnswer: Boolean = false
  feedbackAfterSubmit: String
}

input AnswerDiscriminatorInput {
  type: AnswerType!
  answerMultipleChoice: AnswerMultipleChoiceInput
  answerSingleChoice: AnswerSingleChoiceInput
  answerTrueOrFalse: AnswerTrueOrFalseInput
  answerText: AnswerTextInput
}

input AnswerMultipleChoiceInput {
  type: AnswerType!
  questionId: String!
  answeredAt: DateTime
  optionIds: [String!]
}

input AnswerSingleChoiceInput {
  type: AnswerType!
  questionId: String!
  answeredAt: DateTime
  optionId: String
}

input AnswerTrueOrFalseInput {
  type: AnswerType!
  questionId: String!
  answeredAt: DateTime
  optionId: String
}

input AnswerTextInput {
  type: AnswerType!
  questionId: String!
  answeredAt: DateTime
  text: String
}